/**
 * Next.js instrumentation client file for Sentry client-side initialization
 * This file initializes Sentry for client-side error tracking
 */

// Completely disable Sentry in development to prevent performance issues
if (process.env.DISABLE_SENTRY === 'true' || process.env.NODE_ENV === 'development') {
  console.log('Sentry disabled via DISABLE_SENTRY environment variable or development mode');
  
  export function register() {
    // No-op function when Sentry is disabled
  }
  
  // No-op router transition hook
  export const onRouterTransitionStart = () => {};
} else {
  // Only import Sentry when actually needed
  const Sentry = require('@sentry/nextjs');

  export function register() {
    Sentry.init({
      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,
      
      // Performance monitoring - reduced sampling for better performance
      tracesSampleRate: 0.1,
      
      // Session replay - disabled in development for better performance
      replaysSessionSampleRate: 0.05,
      replaysOnErrorSampleRate: 0.5,
      
      // Environment configuration
      environment: process.env.NODE_ENV,
      
      // Release tracking
      release: process.env.NEXT_PUBLIC_SENTRY_RELEASE,
      
      // Disable debug mode in all environments for better performance
      debug: false,
      
      // Before send hook to filter errors
      beforeSend(event: any, hint: any) {
        // Filter out common non-actionable errors
        const error = hint.originalException;
        if (
          error &&
          typeof error === 'object' &&
          'message' in error &&
          typeof (error as any).message === 'string'
        ) {
          // Filter out network errors that are common
          if ((error as any).message.includes('Network Error') || 
              (error as any).message.includes('Failed to fetch')) {
            return null;
          }
        }
        
        return event;
      },
      
      // Add user context when available
      beforeSendTransaction(event: any) {
        // Add custom context for transactions
        return event;
      },
    });
  }

  // Export router transition hook for navigation tracking
  export const onRouterTransitionStart = Sentry.captureRouterTransitionStart;
} 