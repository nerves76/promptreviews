{
  "files": [
    {
      "path": "src/app/account/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useEffect, useState } from \"react\";"
            ],
            "current": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import { useRouter } from \"next/navigation\";",
              "import {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/admin/analytics/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 12,
          "content": "import { supabase } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "import { useState, useEffect } from 'react';",
              "import { useRouter } from 'next/navigation';"
            ],
            "current": "import { supabase } from '@/utils/supabaseClient';",
            "after": [
              "import { isAdmin } from '../../../utils/admin';",
              "import { FaUsers, FaBuilding, FaStar, FaChartLine, FaCalendarAlt, FaGlobe } from 'react-icons/fa';"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 12,
          "statement": "import { supabase } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/admin/announcements/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 11,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useState, useEffect } from 'react';"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { getAllAnnouncements, createAnnouncement, toggleAnnouncement } from \"@/utils/admin\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 11,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/admin/feedback/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 11,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useState, useEffect } from 'react';"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { getAllFeedback, markFeedbackAsRead, deleteFeedback } from \"@/utils/admin\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 11,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/admin/layout.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 13,
          "content": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { usePathname } from 'next/navigation';",
              "import Link from 'next/link';"
            ],
            "current": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import { isAdmin } from \"@/utils/admin\";",
              "import { useRouter } from \"next/navigation\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 13,
          "statement": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/admin/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 12,
          "content": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useState, useEffect } from 'react';"
            ],
            "current": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import { isAdmin } from \"@/utils/admin\";",
              "import { useRouter } from \"next/navigation\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 12,
          "statement": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/admin/quotes/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 11,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useState, useEffect } from 'react';"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { getAllQuotes, createQuote, toggleQuote, deleteQuote, updateQuote } from \"@/utils/admin\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 11,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/admin/trial-reminders/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 11,
          "content": "import { supabase } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "",
              "import { useState, useEffect } from 'react';"
            ],
            "current": "import { supabase } from '@/utils/supabaseClient';",
            "after": [
              "",
              "interface TrialReminderLog {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 11,
          "statement": "import { supabase } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/admin/delete-user/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 18,
          "content": "const supabaseAdmin = createClient(",
          "context": {
            "before": [
              "",
              "// Initialize Supabase admin client"
            ],
            "current": "const supabaseAdmin = createClient(",
            "after": [
              "  process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "  process.env.SUPABASE_SERVICE_ROLE_KEY!"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 14,
          "statement": "import { createClient } from '@supabase/supabase-js'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/admin/repair-users/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 46,
          "content": "const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {",
          "context": {
            "before": [
              "    }",
              ""
            ],
            "current": "    const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {",
            "after": [
              "      auth: { autoRefreshToken: false, persistSession: false }",
              "    });"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 12,
          "statement": "import { createClient } from '@supabase/supabase-js'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/auth/session/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 2,
          "content": "import { createServerSupabaseClient } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "import { NextRequest, NextResponse } from 'next/server';"
            ],
            "current": "import { createServerSupabaseClient } from '@/utils/supabaseClient';",
            "after": [
              "",
              "export async function GET(request: NextRequest) {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { createServerSupabaseClient } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/auth/signin/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 2,
          "content": "import { createServerSupabaseClient } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "import { NextRequest, NextResponse } from 'next/server';"
            ],
            "current": "import { createServerSupabaseClient } from '@/utils/supabaseClient';",
            "after": [
              "",
              "export async function POST(request: NextRequest) {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { createServerSupabaseClient } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/businesses/[accountId]/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 38,
          "content": "const supabase = createClient(supabaseUrl, supabaseServiceKey);",
          "context": {
            "before": [
              "",
              "    const { createClient } = await import('@supabase/supabase-js');"
            ],
            "current": "    const supabase = createClient(supabaseUrl, supabaseServiceKey);",
            "after": [
              "",
              "    const { data: business, error } = await supabase"
            ]
          }
        }
      ],
      "imports": [],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/businesses/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 13,
          "content": "const supabase = createClient(true); // true = use service role",
          "context": {
            "before": [
              "export async function GET(request: NextRequest) {",
              "  try {"
            ],
            "current": "    const supabase = createClient(true); // true = use service role",
            "after": [
              "",
              "    const { data: businesses, error } = await supabase"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 51,
          "content": "const supabase = createClient(true); // true = use service role",
          "context": {
            "before": [
              "    console.log(`[BUSINESSES] Creating business: ${name} for account: ${account_id}`);",
              ""
            ],
            "current": "    const supabase = createClient(true); // true = use service role",
            "after": [
              "",
              "    // Convert industry string to array if it's a string"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 9,
          "content": "import { createClient } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { NextRequest, NextResponse } from \"next/server\";"
            ],
            "current": "import { createClient } from \"@/utils/supabaseClient\";",
            "after": [
              "",
              "export async function GET(request: NextRequest) {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 9,
          "statement": "import { createClient } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/app/api/check-admin/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 14,
          "content": "const supabase = createClient(supabaseUrl, supabaseAnonKey);",
          "context": {
            "before": [
              "export async function GET(request: NextRequest) {",
              "  try {"
            ],
            "current": "    const supabase = createClient(supabaseUrl, supabaseAnonKey);",
            "after": [
              "    ",
              "    // Get the current user"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 6,
          "statement": "import { createClient } from '@supabase/supabase-js'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/check-ownership/[slug]/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 22,
          "content": "const supabase = createClient(supabaseUrl, supabaseAnonKey);",
          "context": {
            "before": [
              "",
              "    // Create Supabase client (same pattern as check-admin)"
            ],
            "current": "    const supabase = createClient(supabaseUrl, supabaseAnonKey);",
            "after": [
              "",
              "    // Get the current user (same pattern as check-admin)"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { createClient } from \"@supabase/supabase-js\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/check-schema/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 8,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "  try {",
              "    const cookieStore = await cookies();"
            ],
            "current": "    const supabase = createClient(",
            "after": [
              "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 3,
          "statement": "import { createClient } from \"@supabase/supabase-js\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/create-checkout-session/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 32,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "",
              "    // Fetch stripe_customer_id from accounts table"
            ],
            "current": "    const supabase = createClient(",
            "after": [
              "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "      process.env.SUPABASE_SERVICE_ROLE_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 3,
          "statement": "import { createClient } from \"@supabase/supabase-js\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/cron/send-trial-reminders/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 37,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "",
              "    // Create Supabase client with service role key for admin access"
            ],
            "current": "    const supabase = createClient(",
            "after": [
              "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "      process.env.SUPABASE_SERVICE_ROLE_KEY!"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 11,
          "statement": "import { createClient } from '@supabase/supabase-js'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/debug-session/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 12,
          "content": "const supabase = createServerClient();",
          "context": {
            "before": [
              "  }",
              ""
            ],
            "current": "  const supabase = createServerClient();",
            "after": [
              "",
              "  const {"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 3,
          "content": "import { createServerClient, getSessionOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { NextResponse } from \"next/server\";",
              "import { cookies } from \"next/headers\";"
            ],
            "current": "import { createServerClient, getSessionOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "",
              "export async function GET() {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 3,
          "statement": "import { createServerClient, getSessionOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/app/api/email-templates/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 13,
          "content": "const supabase = createServerClient();",
          "context": {
            "before": [
              "export async function GET(request: NextRequest) {",
              "  try {"
            ],
            "current": "    const supabase = createServerClient();",
            "after": [
              "    ",
              "    // Check if user is admin"
            ]
          }
        },
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 45,
          "content": "const supabase = createServerClient();",
          "context": {
            "before": [
              "export async function POST(request: NextRequest) {",
              "  try {"
            ],
            "current": "    const supabase = createServerClient();",
            "after": [
              "    ",
              "    // Check if user is admin"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 8,
          "content": "import { createServerClient } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "",
              "import { NextRequest, NextResponse } from 'next/server';"
            ],
            "current": "import { createServerClient } from '@/utils/supabaseClient';",
            "after": [
              "import { getAllEmailTemplates, updateEmailTemplate } from '../../../utils/emailTemplates';",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 8,
          "statement": "import { createServerClient } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/app/api/feedback/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 5,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "",
              "// Initialize Supabase client with service role key for admin operations"
            ],
            "current": "const supabase = createClient(",
            "after": [
              "  process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "  process.env.SUPABASE_SERVICE_ROLE_KEY!"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { createClient } from '@supabase/supabase-js'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/generate-review/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 46,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "",
              "      // Insert into ai_usage table (using service role for API route)"
            ],
            "current": "      const supabase = createClient(",
            "after": [
              "        process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "        process.env.SUPABASE_SERVICE_ROLE_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 3,
          "statement": "import { createClient } from \"@supabase/supabase-js\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/generate-reviews/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 2,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { NextResponse } from \"next/server\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import OpenAI from \"openai\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/initialize-onboarding-tasks/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 44,
          "content": "supabase = createClient(",
          "context": {
            "before": [
              "      ",
              "      // Create a new Supabase client for header-based auth"
            ],
            "current": "      supabase = createClient(",
            "after": [
              "        process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 70,
          "content": "const serviceClient = createClient(",
          "context": {
            "before": [
              "",
              "    // Create a service role client for database operations"
            ],
            "current": "    const serviceClient = createClient(",
            "after": [
              "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "      process.env.SUPABASE_SERVICE_ROLE_KEY!"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 9,
          "content": "import { createClient } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "",
              "import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';"
            ],
            "current": "import { createClient } from '@/utils/supabaseClient';",
            "after": [
              "import { cookies } from 'next/headers';",
              "import { NextRequest, NextResponse } from 'next/server';"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 8,
          "statement": "import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'"
        },
        {
          "line": 9,
          "statement": "import { createClient } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/app/api/prompt-pages/[slug]/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 38,
          "content": "const supabase = createClient(supabaseUrl, supabaseServiceKey);",
          "context": {
            "before": [
              "",
              "    const { createClient } = await import('@supabase/supabase-js');"
            ],
            "current": "    const supabase = createClient(supabaseUrl, supabaseServiceKey);",
            "after": [
              "",
              "    const { data: promptPage, error } = await supabase"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 102,
          "content": "const supabase = createClient(supabaseUrl, supabaseServiceKey);",
          "context": {
            "before": [
              "",
              "    const { createClient } = await import('@supabase/supabase-js');"
            ],
            "current": "    const supabase = createClient(supabaseUrl, supabaseServiceKey);",
            "after": [
              "",
              "    const { data: promptPage, error } = await supabase"
            ]
          }
        }
      ],
      "imports": [],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file"
      ]
    },
    {
      "path": "src/app/api/prompt-pages/create-prompt-for-contact.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 7,
          "content": "const supabase = createServerClient(",
          "context": {
            "before": [
              "export async function POST(req: NextRequest) {",
              "  const cookieStore = await cookies();"
            ],
            "current": "  const supabase = createServerClient(",
            "after": [
              "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { createServerClient } from \"@supabase/ssr\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/prompt-pages/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 12,
          "content": "const supabase = createServerClient(",
          "context": {
            "before": [
              "    const body = await request.json();",
              "    const cookieStore = await cookies();"
            ],
            "current": "    const supabase = createServerClient(",
            "after": [
              "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { createServerClient } from \"@supabase/ssr\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/refresh-session/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 14,
          "content": "const supabase = createClient(supabaseUrl, supabaseAnonKey);",
          "context": {
            "before": [
              "export async function POST(request: NextRequest) {",
              "  try {"
            ],
            "current": "    const supabase = createClient(supabaseUrl, supabaseAnonKey);",
            "after": [
              "    ",
              "    // Get the current session"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 6,
          "statement": "import { createClient } from '@supabase/supabase-js'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/review-submissions/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 27,
          "content": "const supabase = createClient(supabaseUrl, supabaseServiceKey);",
          "context": {
            "before": [
              "",
              "    const { createClient } = await import('@supabase/supabase-js');"
            ],
            "current": "    const supabase = createClient(supabaseUrl, supabaseServiceKey);",
            "after": [
              "",
              "    const { data: submission, error } = await supabase"
            ]
          }
        }
      ],
      "imports": [],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/review-submissions/verify/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 12,
          "content": "const supabase = createServerClient(",
          "context": {
            "before": [
              "",
              "  const cookieStore = cookies() as any;"
            ],
            "current": "  const supabase = createServerClient(",
            "after": [
              "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { createServerClient } from \"@supabase/ssr\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/send-trial-reminders/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 16,
          "content": "const supabase = createServerClient(",
          "context": {
            "before": [
              "    const cookieStore = await cookies();",
              "    "
            ],
            "current": "    const supabase = createServerClient(",
            "after": [
              "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 8,
          "statement": "import { createServerClient } from '@supabase/ssr'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/stripe-webhook/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 34,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "",
              "  // Connect to Supabase (no cookies needed for webhooks)"
            ],
            "current": "  const supabase = createClient(",
            "after": [
              "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "    process.env.SUPABASE_SERVICE_ROLE_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 3,
          "statement": "import { createClient } from \"@supabase/supabase-js\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/team/invitations/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 12,
          "content": "const supabase = createServerClient();",
          "context": {
            "before": [
              "",
              "export async function GET(request: NextRequest) {"
            ],
            "current": "  const supabase = createServerClient();",
            "after": [
              "",
              "  try {"
            ]
          }
        },
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 95,
          "content": "const supabase = createServerClient();",
          "context": {
            "before": [
              "",
              "export async function DELETE(request: NextRequest) {"
            ],
            "current": "  const supabase = createServerClient();",
            "after": [
              "",
              "  try {"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 8,
          "content": "import { createServerClient } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              " */",
              ""
            ],
            "current": "import { createServerClient } from '@/utils/supabaseClient';",
            "after": [
              "import { NextRequest, NextResponse } from 'next/server';",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 8,
          "statement": "import { createServerClient } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/app/api/team/invite/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 15,
          "content": "const supabase = createServerClient(",
          "context": {
            "before": [
              "export async function POST(request: NextRequest) {",
              "  const cookieStore = cookies() as any;"
            ],
            "current": "  const supabase = createServerClient(",
            "after": [
              "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 8,
          "statement": "import { createServerClient } from '@supabase/ssr'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/team/members/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 14,
          "content": "const supabase = createServerClient(",
          "context": {
            "before": [
              "export async function GET(request: NextRequest) {",
              "  const cookieStore = cookies() as any;"
            ],
            "current": "  const supabase = createServerClient(",
            "after": [
              "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 8,
          "statement": "import { createServerClient } from '@supabase/ssr'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/track-event/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 82,
          "content": "const supabaseService = createClient(true); // true = use service role",
          "context": {
            "before": [
              "",
              "    // Use service key for database operations to bypass RLS"
            ],
            "current": "    const supabaseService = createClient(true); // true = use service role",
            "after": [
              "",
              "    // Insert event"
            ]
          }
        },
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 26,
          "content": "const supabaseAnon = createServerClient();",
          "context": {
            "before": [
              "    ",
              "    // Use anon key for user authentication check"
            ],
            "current": "    const supabaseAnon = createServerClient();",
            "after": [
              "",
              "    // Check if user is logged in"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 9,
          "content": "import { createServerClient, createClient, getUserOrMock } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "",
              "import { NextRequest, NextResponse } from \"next/server\";"
            ],
            "current": "import { createServerClient, createClient, getUserOrMock } from '@/utils/supabaseClient';",
            "after": [
              "import { cookies } from \"next/headers\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 9,
          "statement": "import { createServerClient, createClient, getUserOrMock } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/app/api/track-review/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 106,
          "content": "const supabaseAdmin = createClient(true); // true = use service role",
          "context": {
            "before": [
              "        promptPage?.account_id,",
              "      );"
            ],
            "current": "      const supabaseAdmin = createClient(true); // true = use service role",
            "after": [
              "      const { data: account } = await supabaseAdmin",
              "        .from(\"accounts\")"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 2,
          "content": "import { supabase, createClient } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { NextResponse } from \"next/server\";"
            ],
            "current": "import { supabase, createClient } from \"@/utils/supabaseClient\";",
            "after": [
              "import { sendResendEmail } from \"@/utils/resend\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { supabase, createClient } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/app/api/upload-photo/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 4,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "import { createClient } from \"@supabase/supabase-js\";",
              ""
            ],
            "current": "const supabase = createClient(",
            "after": [
              "  process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { createClient } from \"@supabase/supabase-js\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/upload-widget-photo/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 4,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "import { createClient } from \"@supabase/supabase-js\";",
              ""
            ],
            "current": "const supabase = createClient(",
            "after": [
              "  process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { createClient } from \"@supabase/supabase-js\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/widgets/[id]/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 6,
          "content": "const supabase = createClient();",
          "context": {
            "before": [
              "",
              "// Initialize Supabase client with public credentials"
            ],
            "current": "const supabase = createClient();",
            "after": [
              "",
              "// Initialize Supabase admin client with service role key for data fetching"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 9,
          "content": "const supabaseAdmin = createClient(true);",
          "context": {
            "before": [
              "",
              "// Initialize Supabase admin client with service role key for data fetching"
            ],
            "current": "const supabaseAdmin = createClient(true);",
            "after": [
              "",
              "/**"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 2,
          "content": "import { createClient } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "import { NextResponse } from 'next/server';"
            ],
            "current": "import { createClient } from '@/utils/supabaseClient';",
            "after": [
              "import { getAccountIdForUser } from '@/utils/accountUtils';",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { createClient } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/app/api/widgets/debug/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 5,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "",
              "// Initialize Supabase client with public credentials"
            ],
            "current": "const supabase = createClient(",
            "after": [
              "  process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { createClient } from '@supabase/supabase-js'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/widgets/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 11,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "",
              "// Initialize Supabase client with service key for privileged operations"
            ],
            "current": "const supabase = createClient(",
            "after": [
              "  process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "  process.env.SUPABASE_SERVICE_ROLE_KEY!"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 7,
          "statement": "import { createClient } from '@supabase/supabase-js'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/api/widgets/upload-photo/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 4,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "import { createClient } from \"@supabase/supabase-js\";",
              ""
            ],
            "current": "const supabase = createClient(",
            "after": [
              "  process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { createClient } from \"@supabase/supabase-js\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/auth/callback/route.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 26,
          "content": "const supabaseService = createClient(",
          "context": {
            "before": [
              "    ",
              "    // Use service key for all operations to avoid JWT signature issues"
            ],
            "current": "    const supabaseService = createClient(",
            "after": [
              "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "      process.env.SUPABASE_SERVICE_ROLE_KEY!,"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 32,
          "content": "const supabaseForSession = createClient(",
          "context": {
            "before": [
              "",
              "    // Use service key for session exchange as well"
            ],
            "current": "    const supabaseForSession = createClient(",
            "after": [
              "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "      process.env.SUPABASE_SERVICE_ROLE_KEY!,"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 3,
          "content": "import { createClient } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "import { cookies } from \"next/headers\";",
              "import { NextResponse } from \"next/server\";"
            ],
            "current": "import { createClient } from '@/utils/supabaseClient';",
            "after": [
              "import { sendWelcomeEmail } from \"@/utils/resend-welcome\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 3,
          "statement": "import { createClient } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/app/auth/clear-session/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase, clearAuthSession } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useEffect, useState } from \"react\";"
            ],
            "current": "import { supabase, clearAuthSession } from \"@/utils/supabaseClient\";",
            "after": [
              "import { useRouter } from \"next/navigation\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase, clearAuthSession } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/auth/sign-in/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 5,
          "content": "import { supabase, clearAuthSession } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { useRouter } from \"next/navigation\";",
              "import { useState, useEffect } from \"react\";"
            ],
            "current": "import { supabase, clearAuthSession } from \"@/utils/supabaseClient\";",
            "after": [
              "import { trackEvent, GA_EVENTS } from '../../../utils/analytics';",
              "import SimpleMarketingNav from \"@/app/components/SimpleMarketingNav\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 5,
          "statement": "import { supabase, clearAuthSession } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/auth/sign-up/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 7,
          "content": "import { supabase } from '../../../utils/supabaseClient';",
          "context": {
            "before": [
              "import SimpleMarketingNav from \"@/app/components/SimpleMarketingNav\";",
              "import { trackSignUp } from '../../../utils/analytics';"
            ],
            "current": "import { supabase } from '../../../utils/supabaseClient';",
            "after": [
              "",
              "export default function SignUpPage() {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 7,
          "statement": "import { supabase } from '../../../utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/auth-test/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 29,
          "content": "const { supabase } = await import(\"@/utils/supabaseClient\");",
          "context": {
            "before": [
              "    try {",
              "      // Dynamic import to avoid any potential SSR issues"
            ],
            "current": "      const { supabase } = await import(\"@/utils/supabaseClient\");",
            "after": [
              "      console.log(\"📱 Supabase client imported successfully\");",
              "      setMessage(\"Supabase client loaded, checking session...\");"
            ]
          }
        }
      ],
      "imports": [],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/components/AnnouncementBanner.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 10,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useState, useEffect } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { getActiveAnnouncement } from \"@/utils/admin\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 10,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/components/EmailTemplatesSection.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 8,
          "content": "import { supabase } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "",
              "import React, { useState, useEffect } from 'react';"
            ],
            "current": "import { supabase } from '@/utils/supabaseClient';",
            "after": [
              "",
              "interface EmailTemplate {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 8,
          "statement": "import { supabase } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/components/FeedbackModal.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 10,
          "content": "import { supabase, getSessionOrMock } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "import { useState } from 'react';",
              "import { FaTimes, FaBug, FaLightbulb, FaComment } from 'react-icons/fa';"
            ],
            "current": "import { supabase, getSessionOrMock } from '@/utils/supabaseClient';",
            "after": [
              "import { trackEvent } from '../../utils/analytics';",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 10,
          "statement": "import { supabase, getSessionOrMock } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/components/GettingStarted.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 13,
          "content": "import { supabase } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "import Link from \"next/link\";",
              "import { fetchOnboardingTasks, markTaskAsCompleted, markTaskAsIncomplete } from \"@/utils/onboardingTasks\";"
            ],
            "current": "import { supabase } from '@/utils/supabaseClient';",
            "after": [
              "",
              "interface GettingStartedProps {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 13,
          "statement": "import { supabase } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/components/Header.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 10,
          "content": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { FaUserCircle, FaBell } from \"react-icons/fa\";",
              "import { Menu } from \"@headlessui/react\";"
            ],
            "current": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import { useAdmin } from \"@/contexts/AdminContext\";",
              "import { useBusinessProfile } from \"@/utils/authGuard\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 10,
          "statement": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/components/QuoteDisplay.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 9,
          "content": "import { supabase } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "",
              "import { useState, useEffect } from 'react';"
            ],
            "current": "import { supabase } from '@/utils/supabaseClient';",
            "after": [
              "import { getAllActiveQuotes } from '../../utils/admin';",
              "import { FaChevronLeft, FaChevronRight } from 'react-icons/fa';"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 9,
          "statement": "import { supabase } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/create-prompt-page/CreatePromptPageClient.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 26,
          "content": "import { getUserOrMock, supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { checkAccountLimits } from \"@/utils/accountLimits\";",
              "import { Dialog } from \"@headlessui/react\";"
            ],
            "current": "import { getUserOrMock, supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import dynamic from \"next/dynamic\";",
              "import { slugify } from \"@/utils/slugify\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 26,
          "statement": "import { getUserOrMock, supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/DashboardContent.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import Link from \"next/link\";",
              "import { RefObject, useState, useEffect, useMemo } from \"react\";"
            ],
            "current": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import { useAuthGuard } from \"@/utils/authGuard\";",
              "import {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/analytics/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useState, useEffect } from \"react\";"
            ],
            "current": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import { useAuthGuard } from \"@/utils/authGuard\";",
              "import {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/business-profile/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 5,
          "content": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { useEffect, useState, useRef, useCallback } from \"react\";",
              "import { useRouter } from \"next/navigation\";"
            ],
            "current": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import Cropper from \"react-easy-crop\";",
              "import type { Area } from \"react-easy-crop\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 5,
          "statement": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/components/Analytics.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useEffect, useState } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import type { ReviewSubmission } from \"@/utils/supabaseClient\";",
              ""
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 5,
          "content": "import type { ReviewSubmission } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { useEffect, useState } from \"react\";",
              "import { supabase } from \"@/utils/supabaseClient\";"
            ],
            "current": "import type { ReviewSubmission } from \"@/utils/supabaseClient\";",
            "after": [
              "",
              "interface AnalyticsData {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        },
        {
          "line": 5,
          "statement": "import type { ReviewSubmission } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file"
      ]
    },
    {
      "path": "src/app/dashboard/components/SimpleBusinessForm.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 13,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { FaBuilding, FaRobot } from \"react-icons/fa\";",
              "import IndustrySelector from \"@/app/components/IndustrySelector\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { useRouter } from \"next/navigation\";",
              "import { slugify } from \"@/utils/slugify\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 13,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/contacts/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 5,
          "content": "import { supabase, getSessionOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { useState, useEffect } from \"react\";",
              "import { useAuthGuard } from \"@/utils/authGuard\";"
            ],
            "current": "import { supabase, getSessionOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import {",
              "  FaDownload,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 5,
          "statement": "import { supabase, getSessionOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/create-business/CreateBusinessClient.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 6,
          "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { useRouter } from \"next/navigation\";",
              "import { FaStore } from \"react-icons/fa\";"
            ],
            "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import { useAdmin } from \"@/contexts/AdminContext\";",
              "import SimpleBusinessForm from \"../components/SimpleBusinessForm\";"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 12,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import PageCard from \"@/app/components/PageCard\";",
              "import WelcomePopup from \"@/app/components/WelcomePopup\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { ensureAccountExists, getAccountIdForUser } from \"@/utils/accountUtils\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 6,
          "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
        },
        {
          "line": 12,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file"
      ]
    },
    {
      "path": "src/app/dashboard/create-prompt-page/CreatePromptPageClient.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 26,
          "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { checkAccountLimits } from \"@/utils/accountLimits\";",
              "import { Dialog } from \"@headlessui/react\";"
            ],
            "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import dynamic from \"next/dynamic\";",
              "import { slugify } from \"@/utils/slugify\";"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 34,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import FiveStarSpinner from \"../../components/FiveStarSpinner\";",
              "import AppLoader from \"../../components/AppLoader\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "",
              "interface ReviewPlatformLink {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 26,
          "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
        },
        {
          "line": 34,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file"
      ]
    },
    {
      "path": "src/app/dashboard/create-prompt-page/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import React, { useState, useEffect } from \"react\";",
              "import { useAuthGuard } from \"@/utils/authGuard\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { markTaskAsCompleted } from \"@/utils/onboardingTasks\";",
              "import CreatePromptPageClient from \"./CreatePromptPageClient\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/edit-prompt-page/[slug]/ProductPromptPageForm.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 27,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import Cropper from \"react-easy-crop\";",
              "import type { Area } from \"react-easy-crop\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import SectionHeader from \"@/app/components/SectionHeader\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 27,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/edit-prompt-page/[slug]/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 43,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import AppLoader from \"@/app/components/AppLoader\";",
              "import RobotTooltip from \"@/app/components/RobotTooltip\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "",
              "interface ReviewPlatformLink {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 43,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/edit-prompt-page/universal/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 16,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import PageCard from \"@/app/components/PageCard\";",
              "import offerConfig from \"@/app/components/prompt-modules/offerConfig\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import Link from \"next/link\";",
              "import { markTaskAsCompleted } from \"@/utils/onboardingTasks\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 16,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/layout.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useEffect, useState, useCallback } from \"react\";"
            ],
            "current": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import { getAccountIdForUser } from \"@/utils/accountUtils\";",
              "import { useRouter } from \"next/navigation\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase, getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase, getUserOrMock, getSessionOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useEffect, useState, useRef } from \"react\";"
            ],
            "current": "import { supabase, getUserOrMock, getSessionOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import { useRouter, useSearchParams } from \"next/navigation\";",
              "import { QRCodeSVG } from \"qrcode.react\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase, getUserOrMock, getSessionOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/plan/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 3,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "\"use client\";",
              "import { useEffect, useState, useRef, useCallback } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import PricingModal from \"../../components/PricingModal\";",
              "import AppLoader from \"@/app/components/AppLoader\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 3,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/reviews/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useEffect, useState, useRef } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import {",
              "  FaChevronDown,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/style/StyleModalPage.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 3,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "\"use client\";",
              "import * as React from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { getUserOrMock } from \"@/utils/supabaseClient\";",
              "import { getAccountIdForUser } from \"@/utils/accountUtils\";"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import * as React from \"react\";",
              "import { supabase } from \"@/utils/supabaseClient\";"
            ],
            "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import { getAccountIdForUser } from \"@/utils/accountUtils\";",
              "import { FaArrowsAlt } from \"react-icons/fa\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 3,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        },
        {
          "line": 4,
          "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file"
      ]
    },
    {
      "path": "src/app/dashboard/style/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 6,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { markTaskAsCompleted } from \"@/utils/onboardingTasks\";",
              "import { useAuthGuard } from \"@/utils/authGuard\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import StyleModalPage from \"./StyleModalPage\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 6,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/testimonials/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useEffect, useState, useRef } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import {",
              "  FaChevronDown,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/upload-contacts/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 5,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { useState, useEffect } from \"react\";",
              "import { useAuthGuard } from \"@/utils/authGuard\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import {",
              "  FaDownload,"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 17,
          "content": "import { getUserOrMock, getSessionOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { Dialog } from \"@headlessui/react\";",
              "import { useRouter } from \"next/navigation\";"
            ],
            "current": "import { getUserOrMock, getSessionOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import AppLoader from \"@/app/components/AppLoader\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 5,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        },
        {
          "line": 17,
          "statement": "import { getUserOrMock, getSessionOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file"
      ]
    },
    {
      "path": "src/app/dashboard/widget/WidgetList.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 3,
          "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "\"use client\";",
              "import React, { useState, useEffect } from \"react\";"
            ],
            "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import AppLoader from \"@/app/components/AppLoader\";",
              "import { DraggableModal } from './components/DraggableModal';"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 3,
          "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/widget/components/ReviewManagementModal.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 7,
          "content": "import supabase from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "import AppLoader from \"@/app/components/AppLoader\";",
              "import { PhotoUpload } from './PhotoUpload';"
            ],
            "current": "import supabase from '@/utils/supabaseClient';",
            "after": [
              "",
              "const WORD_LIMIT = 250;"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 7,
          "statement": "import supabase from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/widget/components/ReviewModal.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 2,
          "content": "import { supabase } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "import React, { useState, useEffect, useRef } from 'react';"
            ],
            "current": "import { supabase } from '@/utils/supabaseClient';",
            "after": [
              "import { MAX_WIDGET_REVIEWS } from '@/lib/constants';",
              "import { ReviewList } from './ReviewList';"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { supabase } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/widget/components/WidgetEditorForm.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 17,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              " */",
              "import React, { useState, useRef, useEffect } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { getAccountIdForUser } from \"@/utils/accountUtils\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 17,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/widget/components/WidgetName.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 2,
          "content": "import { supabase } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "import React, { useState } from 'react';"
            ],
            "current": "import { supabase } from '@/utils/supabaseClient';",
            "after": [
              "",
              "interface WidgetNameProps {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 2,
          "statement": "import { supabase } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/widget/hooks/useWidgets.ts",
      "type": "ts",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 3,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "\"use client\";",
              "import { useState, useEffect, useCallback } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { trackWidgetCreated } from \"../../../../utils/analytics\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 3,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/dashboard/widget/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 3,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "\"use client\";",
              "import React, { useState, useEffect, useMemo } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import WidgetList from \"./WidgetList\";",
              "import PageCard from \"@/app/components/PageCard\";"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 3,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/debug-nav/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 5,
          "content": "import { supabase } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "import { useEffect, useState } from 'react';",
              "import { useBusinessProfile } from '@/utils/authGuard';"
            ],
            "current": "import { supabase } from '@/utils/supabaseClient';",
            "after": [
              "import { getUserOrMock } from '@/utils/supabaseClient';",
              "import { getAccountIdForUser } from '@/utils/accountUtils';"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 6,
          "content": "import { getUserOrMock } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "import { useBusinessProfile } from '@/utils/authGuard';",
              "import { supabase } from '@/utils/supabaseClient';"
            ],
            "current": "import { getUserOrMock } from '@/utils/supabaseClient';",
            "after": [
              "import { getAccountIdForUser } from '@/utils/accountUtils';",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 5,
          "statement": "import { supabase } from '@/utils/supabaseClient'"
        },
        {
          "line": 6,
          "statement": "import { getUserOrMock } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file"
      ]
    },
    {
      "path": "src/app/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 5,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { useRouter } from \"next/navigation\";",
              "import { useEffect, useState } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { getUserOrMock } from \"@/utils/supabaseClient\";",
              "import AppLoader from \"@/app/components/AppLoader\";"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 6,
          "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { useEffect, useState } from \"react\";",
              "import { supabase } from \"@/utils/supabaseClient\";"
            ],
            "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import AppLoader from \"@/app/components/AppLoader\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 5,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        },
        {
          "line": 6,
          "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file"
      ]
    },
    {
      "path": "src/app/prompt-pages/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 5,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import React, { useState, useEffect, useMemo } from \"react\";",
              "import { useRef } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import Link from \"next/link\";",
              "import { FaGlobe, FaLink, FaTimes, FaPalette, FaPlus, FaCheck } from \"react-icons/fa\";"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 21,
          "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import QRCodeModal from \"../components/QRCodeModal\";",
              "import StarfallCelebration from \"@/app/components/StarfallCelebration\";"
            ],
            "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import { getAccountIdForUser } from \"@/utils/accountUtils\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 5,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        },
        {
          "line": 21,
          "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file"
      ]
    },
    {
      "path": "src/app/r/[slug]/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 67,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { getFallingIcon, getFallingIconColor } from \"@/app/components/prompt-modules/fallingStarsConfig\";",
              "import dynamic from \"next/dynamic\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { getUserOrMock } from \"@/utils/supabaseClient\";",
              "import { getAccountIdForUser } from \"@/utils/accountUtils\";"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 68,
          "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import dynamic from \"next/dynamic\";",
              "import { supabase } from \"@/utils/supabaseClient\";"
            ],
            "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import { getAccountIdForUser } from \"@/utils/accountUtils\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 67,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        },
        {
          "line": 68,
          "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file"
      ]
    },
    {
      "path": "src/app/reset-password/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useState } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { useRouter } from \"next/navigation\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/sign-out/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useEffect } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { trackEvent, GA_EVENTS } from \"../../utils/analytics\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/test-auth-browser/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 87,
          "content": "const { supabase } = await import(\"@/utils/supabaseClient\");",
          "context": {
            "before": [
              "        // Test 4: Client-side Supabase Session",
              "        try {"
            ],
            "current": "          const { supabase } = await import(\"@/utils/supabaseClient\");",
            "after": [
              "          const { data: { session }, error } = await supabase.auth.getSession();",
              ""
            ]
          }
        }
      ],
      "imports": [],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/app/upgrade/page.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 5,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { useState, useEffect } from \"react\";",
              "import { useRouter } from \"next/navigation\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { FaCheck, FaRocket, FaUsers, FaCrown, FaStar } from \"react-icons/fa\";",
              "import { useAuthGuard } from \"@/utils/authGuard\";"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 8,
          "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { FaCheck, FaRocket, FaUsers, FaCrown, FaStar } from \"react-icons/fa\";",
              "import { useAuthGuard } from \"@/utils/authGuard\";"
            ],
            "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "after": [
              "import FiveStarSpinner from \"@/app/components/FiveStarSpinner\";",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 5,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        },
        {
          "line": 8,
          "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file"
      ]
    },
    {
      "path": "src/components/ReviewSubmissionForm.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 4,
          "content": "import { supabase } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "",
              "import { useState, useEffect } from \"react\";"
            ],
            "current": "import { supabase } from \"@/utils/supabaseClient\";",
            "after": [
              "import { useReviewer } from \"@/contexts/ReviewerContext\";",
              "import type { PromptPage } from \"@/utils/supabaseClient\";"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 6,
          "content": "import type { PromptPage } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { supabase } from \"@/utils/supabaseClient\";",
              "import { useReviewer } from \"@/contexts/ReviewerContext\";"
            ],
            "current": "import type { PromptPage } from \"@/utils/supabaseClient\";",
            "after": [
              "",
              "const PLATFORM_OPTIONS = ["
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 4,
          "statement": "import { supabase } from \"@/utils/supabaseClient\""
        },
        {
          "line": 6,
          "statement": "import type { PromptPage } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file"
      ]
    },
    {
      "path": "src/contexts/AdminContext.tsx",
      "type": "tsx",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 10,
          "content": "import { supabase } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "",
              "import React, { createContext, useContext, useEffect, useState } from 'react';"
            ],
            "current": "import { supabase } from '@/utils/supabaseClient';",
            "after": [
              "import { isAdmin, ensureAdminForEmail } from '@/utils/admin';",
              "import { getCurrentUser } from '@/utils/sessionUtils';"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 10,
          "statement": "import { supabase } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/middleware.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 18,
          "content": "const supabase = createServerClient(",
          "context": {
            "before": [
              "  const cookieStore = await cookies();",
              "  "
            ],
            "current": "  const supabase = createServerClient(",
            "after": [
              "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 1,
          "statement": "import { createServerClient } from \"@supabase/ssr\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/utils/accountLimits.ts",
      "type": "ts",
      "instances": [],
      "imports": [
        {
          "line": 1,
          "statement": "import { SupabaseClient } from \"@supabase/supabase-js\""
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/utils/accountUtils.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 286,
          "content": "const client = supabaseClient || createClient(",
          "context": {
            "before": [
              "export async function getAccountIdForUser(userId: string, supabaseClient?: any): Promise<string | null> {",
              "  try {"
            ],
            "current": "    const client = supabaseClient || createClient(",
            "after": [
              "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 346,
          "content": "const client = supabaseClient || createClient(",
          "context": {
            "before": [
              "export async function getCurrentUserAccountId(supabaseClient?: any): Promise<string | null> {",
              "  try {"
            ],
            "current": "    const client = supabaseClient || createClient(",
            "after": [
              "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 7,
          "content": "import { createClient } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "",
              "import { SupabaseClient } from '@supabase/supabase-js';"
            ],
            "current": "import { createClient } from '@/utils/supabaseClient';",
            "after": [
              "import { getUserOrMock } from \"./supabaseClient\";",
              ""
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 8,
          "content": "import { getUserOrMock } from \"./supabaseClient\";",
          "context": {
            "before": [
              "import { SupabaseClient } from '@supabase/supabase-js';",
              "import { createClient } from '@/utils/supabaseClient';"
            ],
            "current": "import { getUserOrMock } from \"./supabaseClient\";",
            "after": [
              "",
              "export interface AccountUser {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 6,
          "statement": "import { SupabaseClient } from '@supabase/supabase-js'"
        },
        {
          "line": 7,
          "statement": "import { createClient } from '@/utils/supabaseClient'"
        },
        {
          "line": 8,
          "statement": "import { getUserOrMock } from \"./supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/utils/admin.ts",
      "type": "ts",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 6,
          "content": "import { supabase } from './supabaseClient';",
          "context": {
            "before": [
              " */",
              ""
            ],
            "current": "import { supabase } from './supabaseClient';",
            "after": [
              "",
              "/**"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 6,
          "statement": "import { supabase } from './supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/utils/adminDelete.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 18,
          "content": "const supabaseAdmin = createClient(",
          "context": {
            "before": [
              "",
              "// Initialize Supabase admin client with service role key"
            ],
            "current": "const supabaseAdmin = createClient(",
            "after": [
              "  process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "  process.env.SUPABASE_SERVICE_ROLE_KEY!"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 15,
          "statement": "import { createClient } from '@supabase/supabase-js'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/utils/apiAuth.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 30,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "  try {",
              "    // Create Supabase client"
            ],
            "current": "    const supabase = createClient(",
            "after": [
              "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 77,
          "content": "supabase: createClient(",
          "context": {
            "before": [
              "    return { ",
              "      user: null, "
            ],
            "current": "      supabase: createClient(",
            "after": [
              "        process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 12,
          "content": "import { createClient } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              "",
              "import { NextRequest } from 'next/server';"
            ],
            "current": "import { createClient } from '@/utils/supabaseClient';",
            "after": [
              "import { User } from '@supabase/supabase-js';",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 12,
          "statement": "import { createClient } from '@/utils/supabaseClient'"
        },
        {
          "line": 13,
          "statement": "import { User } from '@supabase/supabase-js'"
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/utils/authGuard.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 27,
          "content": "const supabase = createClient();",
          "context": {
            "before": [
              "        ",
              "        // Use the new SSR-compatible client"
            ],
            "current": "        const supabase = createClient();",
            "after": [
              "        ",
              "        // Get the current user using the same method as the server"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 112,
          "content": "const supabase = createClient();",
          "context": {
            "before": [
              "        console.log('📊 useBusinessProfile: Checking business profile...');",
              "        "
            ],
            "current": "        const supabase = createClient();",
            "after": [
              "        ",
              "        // Get current user first"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 3,
          "content": "import { createClient } from \"@/utils/supabaseClient\";",
          "context": {
            "before": [
              "import { useEffect, useState } from \"react\";",
              "import { useRouter } from \"next/navigation\";"
            ],
            "current": "import { createClient } from \"@/utils/supabaseClient\";",
            "after": [
              "",
              "interface AuthGuardOptions {"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 3,
          "statement": "import { createClient } from \"@/utils/supabaseClient\""
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/utils/emailTemplates.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 35,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              " */",
              "export async function getEmailTemplate(name: string): Promise<EmailTemplate | null> {"
            ],
            "current": "  const supabase = createClient(",
            "after": [
              "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "    process.env.SUPABASE_SERVICE_ROLE_KEY!"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 159,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              " */",
              "export async function getAllEmailTemplates(): Promise<EmailTemplate[]> {"
            ],
            "current": "  const supabase = createClient(",
            "after": [
              "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "    process.env.SUPABASE_SERVICE_ROLE_KEY!"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 184,
          "content": "const supabase = createClient(",
          "context": {
            "before": [
              "  updates: Partial<EmailTemplate>",
              "): Promise<{ success: boolean; error?: string }> {"
            ],
            "current": "  const supabase = createClient(",
            "after": [
              "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "    process.env.SUPABASE_SERVICE_ROLE_KEY!"
            ]
          }
        },
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 7,
          "content": "import { createClient } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              " */",
              ""
            ],
            "current": "import { createClient } from '@/utils/supabaseClient';",
            "after": [
              "import { Resend } from 'resend';",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 7,
          "statement": "import { createClient } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    },
    {
      "path": "src/utils/onboardingTasks.ts",
      "type": "ts",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 8,
          "content": "import { supabase } from '@/utils/supabaseClient';",
          "context": {
            "before": [
              " */",
              ""
            ],
            "current": "import { supabase } from '@/utils/supabaseClient';",
            "after": [
              "import { getAccountIdForUser } from './accountUtils';",
              ""
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 8,
          "statement": "import { supabase } from '@/utils/supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/utils/sessionUtils.ts",
      "type": "ts",
      "instances": [
        {
          "type": "supabaseClient import",
          "category": "util-import",
          "line": 8,
          "content": "import { supabase } from './supabaseClient';",
          "context": {
            "before": [
              " */",
              ""
            ],
            "current": "import { supabase } from './supabaseClient';",
            "after": [
              "",
              "/**"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 8,
          "statement": "import { supabase } from './supabaseClient'"
        }
      ],
      "hasMultiplePatterns": false,
      "recommendations": []
    },
    {
      "path": "src/utils/supabaseClient.ts",
      "type": "ts",
      "instances": [
        {
          "type": "createClient",
          "category": "direct",
          "line": 46,
          "content": "export function createClient(): SupabaseClient {",
          "context": {
            "before": [
              " * SINGLETON PATTERN: Only one instance should exist per application",
              " */"
            ],
            "current": "export function createClient(): SupabaseClient {",
            "after": [
              "  if (!_browserClient) {",
              "    const instanceId = Math.floor(Math.random() * 1000);"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 140,
          "content": "_legacyInstance = createClient();",
          "context": {
            "before": [
              "    if (!_legacyInstance) {",
              "      console.log('📢 Legacy supabase export accessed - creating client via proxy');"
            ],
            "current": "      _legacyInstance = createClient();",
            "after": [
              "    }",
              "    return (_legacyInstance as any)[prop];"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 151,
          "content": "const client = createClient();",
          "context": {
            "before": [
              " */",
              "export async function clearAuthSession() {"
            ],
            "current": "  const client = createClient();",
            "after": [
              "  await client.auth.signOut();",
              "  "
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 169,
          "content": "const client = createClient();",
          "context": {
            "before": [
              " */",
              "export async function getCurrentUser(): Promise<User | null> {"
            ],
            "current": "  const client = createClient();",
            "after": [
              "  const { data: { user } } = await client.auth.getUser();",
              "  return user;"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 178,
          "content": "const client = createClient();",
          "context": {
            "before": [
              " */",
              "export async function isAuthenticated(): Promise<boolean> {"
            ],
            "current": "  const client = createClient();",
            "after": [
              "  const { data: { session } } = await client.auth.getSession();",
              "  return !!session;"
            ]
          }
        },
        {
          "type": "createClient",
          "category": "direct",
          "line": 245,
          "content": "const client = createClient();",
          "context": {
            "before": [
              "  ",
              "  try {"
            ],
            "current": "    const client = createClient();",
            "after": [
              "    ",
              "    // Clear any existing session first"
            ]
          }
        },
        {
          "type": "createBrowserClient",
          "category": "ssr-browser",
          "line": 53,
          "content": "_browserClient = createBrowserClient(",
          "context": {
            "before": [
              "    logClientCreation(instanceId, creationLocation);",
              "    "
            ],
            "current": "    _browserClient = createBrowserClient(",
            "after": [
              "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        },
        {
          "type": "createServerClient",
          "category": "ssr-server",
          "line": 89,
          "content": "return createServerClient(",
          "context": {
            "before": [
              "  const cookieStore = await cookies();",
              "  "
            ],
            "current": "  return createServerClient(",
            "after": [
              "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
              "    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
            ]
          }
        }
      ],
      "imports": [
        {
          "line": 15,
          "statement": "import { createBrowserClient } from '@supabase/ssr'"
        },
        {
          "line": 16,
          "statement": "import { createServerClient } from '@supabase/ssr'"
        },
        {
          "line": 17,
          "statement": "import { SupabaseClient, User } from '@supabase/supabase-js'"
        }
      ],
      "hasMultiplePatterns": true,
      "recommendations": [
        "CONSOLIDATE: Multiple client creation patterns in single file",
        "STANDARDIZE: Mixed client types (direct + SSR)"
      ]
    }
  ],
  "summary": {
    "totalFiles": 221,
    "totalInstances": 148,
    "byCategory": {
      "util-import": 87,
      "direct": 46,
      "ssr-server": 14,
      "ssr-browser": 1
    },
    "byFileType": {
      "tsx": 55,
      "ts": 49
    },
    "problematicFiles": [
      {
        "path": "src/app/api/businesses/route.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createClient",
            "category": "direct",
            "line": 13,
            "content": "const supabase = createClient(true); // true = use service role",
            "context": {
              "before": [
                "export async function GET(request: NextRequest) {",
                "  try {"
              ],
              "current": "    const supabase = createClient(true); // true = use service role",
              "after": [
                "",
                "    const { data: businesses, error } = await supabase"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 51,
            "content": "const supabase = createClient(true); // true = use service role",
            "context": {
              "before": [
                "    console.log(`[BUSINESSES] Creating business: ${name} for account: ${account_id}`);",
                ""
              ],
              "current": "    const supabase = createClient(true); // true = use service role",
              "after": [
                "",
                "    // Convert industry string to array if it's a string"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 9,
            "content": "import { createClient } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "",
                "import { NextRequest, NextResponse } from \"next/server\";"
              ],
              "current": "import { createClient } from \"@/utils/supabaseClient\";",
              "after": [
                "",
                "export async function GET(request: NextRequest) {"
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 9,
            "statement": "import { createClient } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/app/api/debug-session/route.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createServerClient",
            "category": "ssr-server",
            "line": 12,
            "content": "const supabase = createServerClient();",
            "context": {
              "before": [
                "  }",
                ""
              ],
              "current": "  const supabase = createServerClient();",
              "after": [
                "",
                "  const {"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 3,
            "content": "import { createServerClient, getSessionOrMock } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { NextResponse } from \"next/server\";",
                "import { cookies } from \"next/headers\";"
              ],
              "current": "import { createServerClient, getSessionOrMock } from \"@/utils/supabaseClient\";",
              "after": [
                "",
                "export async function GET() {"
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 3,
            "statement": "import { createServerClient, getSessionOrMock } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/app/api/email-templates/route.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createServerClient",
            "category": "ssr-server",
            "line": 13,
            "content": "const supabase = createServerClient();",
            "context": {
              "before": [
                "export async function GET(request: NextRequest) {",
                "  try {"
              ],
              "current": "    const supabase = createServerClient();",
              "after": [
                "    ",
                "    // Check if user is admin"
              ]
            }
          },
          {
            "type": "createServerClient",
            "category": "ssr-server",
            "line": 45,
            "content": "const supabase = createServerClient();",
            "context": {
              "before": [
                "export async function POST(request: NextRequest) {",
                "  try {"
              ],
              "current": "    const supabase = createServerClient();",
              "after": [
                "    ",
                "    // Check if user is admin"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 8,
            "content": "import { createServerClient } from '@/utils/supabaseClient';",
            "context": {
              "before": [
                "",
                "import { NextRequest, NextResponse } from 'next/server';"
              ],
              "current": "import { createServerClient } from '@/utils/supabaseClient';",
              "after": [
                "import { getAllEmailTemplates, updateEmailTemplate } from '../../../utils/emailTemplates';",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 8,
            "statement": "import { createServerClient } from '@/utils/supabaseClient'"
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/app/api/initialize-onboarding-tasks/route.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createClient",
            "category": "direct",
            "line": 44,
            "content": "supabase = createClient(",
            "context": {
              "before": [
                "      ",
                "      // Create a new Supabase client for header-based auth"
              ],
              "current": "      supabase = createClient(",
              "after": [
                "        process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 70,
            "content": "const serviceClient = createClient(",
            "context": {
              "before": [
                "",
                "    // Create a service role client for database operations"
              ],
              "current": "    const serviceClient = createClient(",
              "after": [
                "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "      process.env.SUPABASE_SERVICE_ROLE_KEY!"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 9,
            "content": "import { createClient } from '@/utils/supabaseClient';",
            "context": {
              "before": [
                "",
                "import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';"
              ],
              "current": "import { createClient } from '@/utils/supabaseClient';",
              "after": [
                "import { cookies } from 'next/headers';",
                "import { NextRequest, NextResponse } from 'next/server';"
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 8,
            "statement": "import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'"
          },
          {
            "line": 9,
            "statement": "import { createClient } from '@/utils/supabaseClient'"
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/app/api/prompt-pages/[slug]/route.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createClient",
            "category": "direct",
            "line": 38,
            "content": "const supabase = createClient(supabaseUrl, supabaseServiceKey);",
            "context": {
              "before": [
                "",
                "    const { createClient } = await import('@supabase/supabase-js');"
              ],
              "current": "    const supabase = createClient(supabaseUrl, supabaseServiceKey);",
              "after": [
                "",
                "    const { data: promptPage, error } = await supabase"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 102,
            "content": "const supabase = createClient(supabaseUrl, supabaseServiceKey);",
            "context": {
              "before": [
                "",
                "    const { createClient } = await import('@supabase/supabase-js');"
              ],
              "current": "    const supabase = createClient(supabaseUrl, supabaseServiceKey);",
              "after": [
                "",
                "    const { data: promptPage, error } = await supabase"
              ]
            }
          }
        ],
        "imports": [],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file"
        ]
      },
      {
        "path": "src/app/api/team/invitations/route.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createServerClient",
            "category": "ssr-server",
            "line": 12,
            "content": "const supabase = createServerClient();",
            "context": {
              "before": [
                "",
                "export async function GET(request: NextRequest) {"
              ],
              "current": "  const supabase = createServerClient();",
              "after": [
                "",
                "  try {"
              ]
            }
          },
          {
            "type": "createServerClient",
            "category": "ssr-server",
            "line": 95,
            "content": "const supabase = createServerClient();",
            "context": {
              "before": [
                "",
                "export async function DELETE(request: NextRequest) {"
              ],
              "current": "  const supabase = createServerClient();",
              "after": [
                "",
                "  try {"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 8,
            "content": "import { createServerClient } from '@/utils/supabaseClient';",
            "context": {
              "before": [
                " */",
                ""
              ],
              "current": "import { createServerClient } from '@/utils/supabaseClient';",
              "after": [
                "import { NextRequest, NextResponse } from 'next/server';",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 8,
            "statement": "import { createServerClient } from '@/utils/supabaseClient'"
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/app/api/track-event/route.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createClient",
            "category": "direct",
            "line": 82,
            "content": "const supabaseService = createClient(true); // true = use service role",
            "context": {
              "before": [
                "",
                "    // Use service key for database operations to bypass RLS"
              ],
              "current": "    const supabaseService = createClient(true); // true = use service role",
              "after": [
                "",
                "    // Insert event"
              ]
            }
          },
          {
            "type": "createServerClient",
            "category": "ssr-server",
            "line": 26,
            "content": "const supabaseAnon = createServerClient();",
            "context": {
              "before": [
                "    ",
                "    // Use anon key for user authentication check"
              ],
              "current": "    const supabaseAnon = createServerClient();",
              "after": [
                "",
                "    // Check if user is logged in"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 9,
            "content": "import { createServerClient, createClient, getUserOrMock } from '@/utils/supabaseClient';",
            "context": {
              "before": [
                "",
                "import { NextRequest, NextResponse } from \"next/server\";"
              ],
              "current": "import { createServerClient, createClient, getUserOrMock } from '@/utils/supabaseClient';",
              "after": [
                "import { cookies } from \"next/headers\";",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 9,
            "statement": "import { createServerClient, createClient, getUserOrMock } from '@/utils/supabaseClient'"
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/app/api/track-review/route.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createClient",
            "category": "direct",
            "line": 106,
            "content": "const supabaseAdmin = createClient(true); // true = use service role",
            "context": {
              "before": [
                "        promptPage?.account_id,",
                "      );"
              ],
              "current": "      const supabaseAdmin = createClient(true); // true = use service role",
              "after": [
                "      const { data: account } = await supabaseAdmin",
                "        .from(\"accounts\")"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 2,
            "content": "import { supabase, createClient } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { NextResponse } from \"next/server\";"
              ],
              "current": "import { supabase, createClient } from \"@/utils/supabaseClient\";",
              "after": [
                "import { sendResendEmail } from \"@/utils/resend\";",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 2,
            "statement": "import { supabase, createClient } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/app/api/widgets/[id]/route.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createClient",
            "category": "direct",
            "line": 6,
            "content": "const supabase = createClient();",
            "context": {
              "before": [
                "",
                "// Initialize Supabase client with public credentials"
              ],
              "current": "const supabase = createClient();",
              "after": [
                "",
                "// Initialize Supabase admin client with service role key for data fetching"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 9,
            "content": "const supabaseAdmin = createClient(true);",
            "context": {
              "before": [
                "",
                "// Initialize Supabase admin client with service role key for data fetching"
              ],
              "current": "const supabaseAdmin = createClient(true);",
              "after": [
                "",
                "/**"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 2,
            "content": "import { createClient } from '@/utils/supabaseClient';",
            "context": {
              "before": [
                "import { NextResponse } from 'next/server';"
              ],
              "current": "import { createClient } from '@/utils/supabaseClient';",
              "after": [
                "import { getAccountIdForUser } from '@/utils/accountUtils';",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 2,
            "statement": "import { createClient } from '@/utils/supabaseClient'"
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/app/auth/callback/route.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createClient",
            "category": "direct",
            "line": 26,
            "content": "const supabaseService = createClient(",
            "context": {
              "before": [
                "    ",
                "    // Use service key for all operations to avoid JWT signature issues"
              ],
              "current": "    const supabaseService = createClient(",
              "after": [
                "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "      process.env.SUPABASE_SERVICE_ROLE_KEY!,"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 32,
            "content": "const supabaseForSession = createClient(",
            "context": {
              "before": [
                "",
                "    // Use service key for session exchange as well"
              ],
              "current": "    const supabaseForSession = createClient(",
              "after": [
                "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "      process.env.SUPABASE_SERVICE_ROLE_KEY!,"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 3,
            "content": "import { createClient } from '@/utils/supabaseClient';",
            "context": {
              "before": [
                "import { cookies } from \"next/headers\";",
                "import { NextResponse } from \"next/server\";"
              ],
              "current": "import { createClient } from '@/utils/supabaseClient';",
              "after": [
                "import { sendWelcomeEmail } from \"@/utils/resend-welcome\";",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 3,
            "statement": "import { createClient } from '@/utils/supabaseClient'"
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/app/dashboard/components/Analytics.tsx",
        "type": "tsx",
        "instances": [
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 4,
            "content": "import { supabase } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "",
                "import { useEffect, useState } from \"react\";"
              ],
              "current": "import { supabase } from \"@/utils/supabaseClient\";",
              "after": [
                "import type { ReviewSubmission } from \"@/utils/supabaseClient\";",
                ""
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 5,
            "content": "import type { ReviewSubmission } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { useEffect, useState } from \"react\";",
                "import { supabase } from \"@/utils/supabaseClient\";"
              ],
              "current": "import type { ReviewSubmission } from \"@/utils/supabaseClient\";",
              "after": [
                "",
                "interface AnalyticsData {"
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 4,
            "statement": "import { supabase } from \"@/utils/supabaseClient\""
          },
          {
            "line": 5,
            "statement": "import type { ReviewSubmission } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file"
        ]
      },
      {
        "path": "src/app/dashboard/create-business/CreateBusinessClient.tsx",
        "type": "tsx",
        "instances": [
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 6,
            "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { useRouter } from \"next/navigation\";",
                "import { FaStore } from \"react-icons/fa\";"
              ],
              "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
              "after": [
                "import { useAdmin } from \"@/contexts/AdminContext\";",
                "import SimpleBusinessForm from \"../components/SimpleBusinessForm\";"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 12,
            "content": "import { supabase } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import PageCard from \"@/app/components/PageCard\";",
                "import WelcomePopup from \"@/app/components/WelcomePopup\";"
              ],
              "current": "import { supabase } from \"@/utils/supabaseClient\";",
              "after": [
                "import { ensureAccountExists, getAccountIdForUser } from \"@/utils/accountUtils\";",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 6,
            "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
          },
          {
            "line": 12,
            "statement": "import { supabase } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file"
        ]
      },
      {
        "path": "src/app/dashboard/create-prompt-page/CreatePromptPageClient.tsx",
        "type": "tsx",
        "instances": [
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 26,
            "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { checkAccountLimits } from \"@/utils/accountLimits\";",
                "import { Dialog } from \"@headlessui/react\";"
              ],
              "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
              "after": [
                "import dynamic from \"next/dynamic\";",
                "import { slugify } from \"@/utils/slugify\";"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 34,
            "content": "import { supabase } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import FiveStarSpinner from \"../../components/FiveStarSpinner\";",
                "import AppLoader from \"../../components/AppLoader\";"
              ],
              "current": "import { supabase } from \"@/utils/supabaseClient\";",
              "after": [
                "",
                "interface ReviewPlatformLink {"
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 26,
            "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
          },
          {
            "line": 34,
            "statement": "import { supabase } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file"
        ]
      },
      {
        "path": "src/app/dashboard/style/StyleModalPage.tsx",
        "type": "tsx",
        "instances": [
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 3,
            "content": "import { supabase } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "\"use client\";",
                "import * as React from \"react\";"
              ],
              "current": "import { supabase } from \"@/utils/supabaseClient\";",
              "after": [
                "import { getUserOrMock } from \"@/utils/supabaseClient\";",
                "import { getAccountIdForUser } from \"@/utils/accountUtils\";"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 4,
            "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import * as React from \"react\";",
                "import { supabase } from \"@/utils/supabaseClient\";"
              ],
              "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
              "after": [
                "import { getAccountIdForUser } from \"@/utils/accountUtils\";",
                "import { FaArrowsAlt } from \"react-icons/fa\";"
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 3,
            "statement": "import { supabase } from \"@/utils/supabaseClient\""
          },
          {
            "line": 4,
            "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file"
        ]
      },
      {
        "path": "src/app/dashboard/upload-contacts/page.tsx",
        "type": "tsx",
        "instances": [
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 5,
            "content": "import { supabase } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { useState, useEffect } from \"react\";",
                "import { useAuthGuard } from \"@/utils/authGuard\";"
              ],
              "current": "import { supabase } from \"@/utils/supabaseClient\";",
              "after": [
                "import {",
                "  FaDownload,"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 17,
            "content": "import { getUserOrMock, getSessionOrMock } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { Dialog } from \"@headlessui/react\";",
                "import { useRouter } from \"next/navigation\";"
              ],
              "current": "import { getUserOrMock, getSessionOrMock } from \"@/utils/supabaseClient\";",
              "after": [
                "import AppLoader from \"@/app/components/AppLoader\";",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 5,
            "statement": "import { supabase } from \"@/utils/supabaseClient\""
          },
          {
            "line": 17,
            "statement": "import { getUserOrMock, getSessionOrMock } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file"
        ]
      },
      {
        "path": "src/app/debug-nav/page.tsx",
        "type": "tsx",
        "instances": [
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 5,
            "content": "import { supabase } from '@/utils/supabaseClient';",
            "context": {
              "before": [
                "import { useEffect, useState } from 'react';",
                "import { useBusinessProfile } from '@/utils/authGuard';"
              ],
              "current": "import { supabase } from '@/utils/supabaseClient';",
              "after": [
                "import { getUserOrMock } from '@/utils/supabaseClient';",
                "import { getAccountIdForUser } from '@/utils/accountUtils';"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 6,
            "content": "import { getUserOrMock } from '@/utils/supabaseClient';",
            "context": {
              "before": [
                "import { useBusinessProfile } from '@/utils/authGuard';",
                "import { supabase } from '@/utils/supabaseClient';"
              ],
              "current": "import { getUserOrMock } from '@/utils/supabaseClient';",
              "after": [
                "import { getAccountIdForUser } from '@/utils/accountUtils';",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 5,
            "statement": "import { supabase } from '@/utils/supabaseClient'"
          },
          {
            "line": 6,
            "statement": "import { getUserOrMock } from '@/utils/supabaseClient'"
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file"
        ]
      },
      {
        "path": "src/app/page.tsx",
        "type": "tsx",
        "instances": [
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 5,
            "content": "import { supabase } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { useRouter } from \"next/navigation\";",
                "import { useEffect, useState } from \"react\";"
              ],
              "current": "import { supabase } from \"@/utils/supabaseClient\";",
              "after": [
                "import { getUserOrMock } from \"@/utils/supabaseClient\";",
                "import AppLoader from \"@/app/components/AppLoader\";"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 6,
            "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { useEffect, useState } from \"react\";",
                "import { supabase } from \"@/utils/supabaseClient\";"
              ],
              "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
              "after": [
                "import AppLoader from \"@/app/components/AppLoader\";",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 5,
            "statement": "import { supabase } from \"@/utils/supabaseClient\""
          },
          {
            "line": 6,
            "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file"
        ]
      },
      {
        "path": "src/app/prompt-pages/page.tsx",
        "type": "tsx",
        "instances": [
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 5,
            "content": "import { supabase } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import React, { useState, useEffect, useMemo } from \"react\";",
                "import { useRef } from \"react\";"
              ],
              "current": "import { supabase } from \"@/utils/supabaseClient\";",
              "after": [
                "import Link from \"next/link\";",
                "import { FaGlobe, FaLink, FaTimes, FaPalette, FaPlus, FaCheck } from \"react-icons/fa\";"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 21,
            "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import QRCodeModal from \"../components/QRCodeModal\";",
                "import StarfallCelebration from \"@/app/components/StarfallCelebration\";"
              ],
              "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
              "after": [
                "import { getAccountIdForUser } from \"@/utils/accountUtils\";",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 5,
            "statement": "import { supabase } from \"@/utils/supabaseClient\""
          },
          {
            "line": 21,
            "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file"
        ]
      },
      {
        "path": "src/app/r/[slug]/page.tsx",
        "type": "tsx",
        "instances": [
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 67,
            "content": "import { supabase } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { getFallingIcon, getFallingIconColor } from \"@/app/components/prompt-modules/fallingStarsConfig\";",
                "import dynamic from \"next/dynamic\";"
              ],
              "current": "import { supabase } from \"@/utils/supabaseClient\";",
              "after": [
                "import { getUserOrMock } from \"@/utils/supabaseClient\";",
                "import { getAccountIdForUser } from \"@/utils/accountUtils\";"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 68,
            "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import dynamic from \"next/dynamic\";",
                "import { supabase } from \"@/utils/supabaseClient\";"
              ],
              "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
              "after": [
                "import { getAccountIdForUser } from \"@/utils/accountUtils\";",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 67,
            "statement": "import { supabase } from \"@/utils/supabaseClient\""
          },
          {
            "line": 68,
            "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file"
        ]
      },
      {
        "path": "src/app/upgrade/page.tsx",
        "type": "tsx",
        "instances": [
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 5,
            "content": "import { supabase } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { useState, useEffect } from \"react\";",
                "import { useRouter } from \"next/navigation\";"
              ],
              "current": "import { supabase } from \"@/utils/supabaseClient\";",
              "after": [
                "import { FaCheck, FaRocket, FaUsers, FaCrown, FaStar } from \"react-icons/fa\";",
                "import { useAuthGuard } from \"@/utils/authGuard\";"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 8,
            "content": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { FaCheck, FaRocket, FaUsers, FaCrown, FaStar } from \"react-icons/fa\";",
                "import { useAuthGuard } from \"@/utils/authGuard\";"
              ],
              "current": "import { getUserOrMock } from \"@/utils/supabaseClient\";",
              "after": [
                "import FiveStarSpinner from \"@/app/components/FiveStarSpinner\";",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 5,
            "statement": "import { supabase } from \"@/utils/supabaseClient\""
          },
          {
            "line": 8,
            "statement": "import { getUserOrMock } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file"
        ]
      },
      {
        "path": "src/components/ReviewSubmissionForm.tsx",
        "type": "tsx",
        "instances": [
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 4,
            "content": "import { supabase } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "",
                "import { useState, useEffect } from \"react\";"
              ],
              "current": "import { supabase } from \"@/utils/supabaseClient\";",
              "after": [
                "import { useReviewer } from \"@/contexts/ReviewerContext\";",
                "import type { PromptPage } from \"@/utils/supabaseClient\";"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 6,
            "content": "import type { PromptPage } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { supabase } from \"@/utils/supabaseClient\";",
                "import { useReviewer } from \"@/contexts/ReviewerContext\";"
              ],
              "current": "import type { PromptPage } from \"@/utils/supabaseClient\";",
              "after": [
                "",
                "const PLATFORM_OPTIONS = ["
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 4,
            "statement": "import { supabase } from \"@/utils/supabaseClient\""
          },
          {
            "line": 6,
            "statement": "import type { PromptPage } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file"
        ]
      },
      {
        "path": "src/utils/accountUtils.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createClient",
            "category": "direct",
            "line": 286,
            "content": "const client = supabaseClient || createClient(",
            "context": {
              "before": [
                "export async function getAccountIdForUser(userId: string, supabaseClient?: any): Promise<string | null> {",
                "  try {"
              ],
              "current": "    const client = supabaseClient || createClient(",
              "after": [
                "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 346,
            "content": "const client = supabaseClient || createClient(",
            "context": {
              "before": [
                "export async function getCurrentUserAccountId(supabaseClient?: any): Promise<string | null> {",
                "  try {"
              ],
              "current": "    const client = supabaseClient || createClient(",
              "after": [
                "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 7,
            "content": "import { createClient } from '@/utils/supabaseClient';",
            "context": {
              "before": [
                "",
                "import { SupabaseClient } from '@supabase/supabase-js';"
              ],
              "current": "import { createClient } from '@/utils/supabaseClient';",
              "after": [
                "import { getUserOrMock } from \"./supabaseClient\";",
                ""
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 8,
            "content": "import { getUserOrMock } from \"./supabaseClient\";",
            "context": {
              "before": [
                "import { SupabaseClient } from '@supabase/supabase-js';",
                "import { createClient } from '@/utils/supabaseClient';"
              ],
              "current": "import { getUserOrMock } from \"./supabaseClient\";",
              "after": [
                "",
                "export interface AccountUser {"
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 6,
            "statement": "import { SupabaseClient } from '@supabase/supabase-js'"
          },
          {
            "line": 7,
            "statement": "import { createClient } from '@/utils/supabaseClient'"
          },
          {
            "line": 8,
            "statement": "import { getUserOrMock } from \"./supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/utils/apiAuth.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createClient",
            "category": "direct",
            "line": 30,
            "content": "const supabase = createClient(",
            "context": {
              "before": [
                "  try {",
                "    // Create Supabase client"
              ],
              "current": "    const supabase = createClient(",
              "after": [
                "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 77,
            "content": "supabase: createClient(",
            "context": {
              "before": [
                "    return { ",
                "      user: null, "
              ],
              "current": "      supabase: createClient(",
              "after": [
                "        process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 12,
            "content": "import { createClient } from '@/utils/supabaseClient';",
            "context": {
              "before": [
                "",
                "import { NextRequest } from 'next/server';"
              ],
              "current": "import { createClient } from '@/utils/supabaseClient';",
              "after": [
                "import { User } from '@supabase/supabase-js';",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 12,
            "statement": "import { createClient } from '@/utils/supabaseClient'"
          },
          {
            "line": 13,
            "statement": "import { User } from '@supabase/supabase-js'"
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/utils/authGuard.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createClient",
            "category": "direct",
            "line": 27,
            "content": "const supabase = createClient();",
            "context": {
              "before": [
                "        ",
                "        // Use the new SSR-compatible client"
              ],
              "current": "        const supabase = createClient();",
              "after": [
                "        ",
                "        // Get the current user using the same method as the server"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 112,
            "content": "const supabase = createClient();",
            "context": {
              "before": [
                "        console.log('📊 useBusinessProfile: Checking business profile...');",
                "        "
              ],
              "current": "        const supabase = createClient();",
              "after": [
                "        ",
                "        // Get current user first"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 3,
            "content": "import { createClient } from \"@/utils/supabaseClient\";",
            "context": {
              "before": [
                "import { useEffect, useState } from \"react\";",
                "import { useRouter } from \"next/navigation\";"
              ],
              "current": "import { createClient } from \"@/utils/supabaseClient\";",
              "after": [
                "",
                "interface AuthGuardOptions {"
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 3,
            "statement": "import { createClient } from \"@/utils/supabaseClient\""
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/utils/emailTemplates.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createClient",
            "category": "direct",
            "line": 35,
            "content": "const supabase = createClient(",
            "context": {
              "before": [
                " */",
                "export async function getEmailTemplate(name: string): Promise<EmailTemplate | null> {"
              ],
              "current": "  const supabase = createClient(",
              "after": [
                "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "    process.env.SUPABASE_SERVICE_ROLE_KEY!"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 159,
            "content": "const supabase = createClient(",
            "context": {
              "before": [
                " */",
                "export async function getAllEmailTemplates(): Promise<EmailTemplate[]> {"
              ],
              "current": "  const supabase = createClient(",
              "after": [
                "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "    process.env.SUPABASE_SERVICE_ROLE_KEY!"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 184,
            "content": "const supabase = createClient(",
            "context": {
              "before": [
                "  updates: Partial<EmailTemplate>",
                "): Promise<{ success: boolean; error?: string }> {"
              ],
              "current": "  const supabase = createClient(",
              "after": [
                "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "    process.env.SUPABASE_SERVICE_ROLE_KEY!"
              ]
            }
          },
          {
            "type": "supabaseClient import",
            "category": "util-import",
            "line": 7,
            "content": "import { createClient } from '@/utils/supabaseClient';",
            "context": {
              "before": [
                " */",
                ""
              ],
              "current": "import { createClient } from '@/utils/supabaseClient';",
              "after": [
                "import { Resend } from 'resend';",
                ""
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 7,
            "statement": "import { createClient } from '@/utils/supabaseClient'"
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      },
      {
        "path": "src/utils/supabaseClient.ts",
        "type": "ts",
        "instances": [
          {
            "type": "createClient",
            "category": "direct",
            "line": 46,
            "content": "export function createClient(): SupabaseClient {",
            "context": {
              "before": [
                " * SINGLETON PATTERN: Only one instance should exist per application",
                " */"
              ],
              "current": "export function createClient(): SupabaseClient {",
              "after": [
                "  if (!_browserClient) {",
                "    const instanceId = Math.floor(Math.random() * 1000);"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 140,
            "content": "_legacyInstance = createClient();",
            "context": {
              "before": [
                "    if (!_legacyInstance) {",
                "      console.log('📢 Legacy supabase export accessed - creating client via proxy');"
              ],
              "current": "      _legacyInstance = createClient();",
              "after": [
                "    }",
                "    return (_legacyInstance as any)[prop];"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 151,
            "content": "const client = createClient();",
            "context": {
              "before": [
                " */",
                "export async function clearAuthSession() {"
              ],
              "current": "  const client = createClient();",
              "after": [
                "  await client.auth.signOut();",
                "  "
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 169,
            "content": "const client = createClient();",
            "context": {
              "before": [
                " */",
                "export async function getCurrentUser(): Promise<User | null> {"
              ],
              "current": "  const client = createClient();",
              "after": [
                "  const { data: { user } } = await client.auth.getUser();",
                "  return user;"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 178,
            "content": "const client = createClient();",
            "context": {
              "before": [
                " */",
                "export async function isAuthenticated(): Promise<boolean> {"
              ],
              "current": "  const client = createClient();",
              "after": [
                "  const { data: { session } } = await client.auth.getSession();",
                "  return !!session;"
              ]
            }
          },
          {
            "type": "createClient",
            "category": "direct",
            "line": 245,
            "content": "const client = createClient();",
            "context": {
              "before": [
                "  ",
                "  try {"
              ],
              "current": "    const client = createClient();",
              "after": [
                "    ",
                "    // Clear any existing session first"
              ]
            }
          },
          {
            "type": "createBrowserClient",
            "category": "ssr-browser",
            "line": 53,
            "content": "_browserClient = createBrowserClient(",
            "context": {
              "before": [
                "    logClientCreation(instanceId, creationLocation);",
                "    "
              ],
              "current": "    _browserClient = createBrowserClient(",
              "after": [
                "      process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
              ]
            }
          },
          {
            "type": "createServerClient",
            "category": "ssr-server",
            "line": 89,
            "content": "return createServerClient(",
            "context": {
              "before": [
                "  const cookieStore = await cookies();",
                "  "
              ],
              "current": "  return createServerClient(",
              "after": [
                "    process.env.NEXT_PUBLIC_SUPABASE_URL!,",
                "    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,"
              ]
            }
          }
        ],
        "imports": [
          {
            "line": 15,
            "statement": "import { createBrowserClient } from '@supabase/ssr'"
          },
          {
            "line": 16,
            "statement": "import { createServerClient } from '@supabase/ssr'"
          },
          {
            "line": 17,
            "statement": "import { SupabaseClient, User } from '@supabase/supabase-js'"
          }
        ],
        "hasMultiplePatterns": true,
        "recommendations": [
          "CONSOLIDATE: Multiple client creation patterns in single file",
          "STANDARDIZE: Mixed client types (direct + SSR)"
        ]
      }
    ]
  }
}